name: Render Architecture Diagrams

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  WORKFLOW_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG || 'false' }}
  PYTHON_VERSION: '3.11'
  PLANTUML_VERSION: 'v1.2023.12'

jobs:
  render-diagrams:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better debugging
      
    - name: Set up logging and debugging
      run: |
        echo "::group::Workflow Environment"
        echo "Workflow run ID: ${{ github.run_id }}"
        echo "Workflow run number: ${{ github.run_number }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "Debug mode: $WORKFLOW_DEBUG"
        echo "::endgroup::"
        
        # Create logs directory
        mkdir -p workflow-logs
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Workflow started" > workflow-logs/execution.log
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
      continue-on-error: false
      
    - name: Install uv with error handling
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
      continue-on-error: false
      
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
        
    - name: Install dependencies with retry logic
      run: |
        echo "::group::Installing Dependencies"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Starting dependency installation" >> workflow-logs/execution.log
        
        # Retry logic for dependency installation
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts to install dependencies..."
          
          if uv sync; then
            echo "✓ Dependencies installed successfully on attempt $attempt"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Dependencies installed successfully" >> workflow-logs/execution.log
            break
          else
            echo "✗ Dependency installation failed on attempt $attempt"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Dependency installation failed (attempt $attempt)" >> workflow-logs/execution.log
            
            if [ $attempt -eq $max_attempts ]; then
              echo "::error::Failed to install dependencies after $max_attempts attempts"
              echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - CRITICAL: Dependency installation failed after all attempts" >> workflow-logs/execution.log
              exit 1
            fi
            
            echo "Waiting 10 seconds before retry..."
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        echo "::endgroup::"
        
    - name: Verify installation with detailed diagnostics
      run: |
        echo "::group::Installation Verification"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Starting installation verification" >> workflow-logs/execution.log
        
        # Check Python version
        echo "Python version:"
        uv run python --version || {
          echo "::error::Python verification failed"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - ERROR: Python verification failed" >> workflow-logs/execution.log
          exit 1
        }
        
        # Check pystructurizr installation
        echo "Checking pystructurizr installation:"
        if uv run python -c "import pystructurizr; print('pystructurizr version:', pystructurizr.__version__ if hasattr(pystructurizr, '__version__') else 'unknown')"; then
          echo "✓ pystructurizr installed successfully"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - pystructurizr verified successfully" >> workflow-logs/execution.log
        else
          echo "::error::pystructurizr verification failed"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - ERROR: pystructurizr verification failed" >> workflow-logs/execution.log
          exit 1
        fi
        
        # List installed packages for debugging
        echo "Installed packages:"
        uv pip list || echo "::warning::Could not list installed packages"
        
        echo "::endgroup::"
        
    - name: Create output directories with error handling
      run: |
        echo "::group::Creating Output Directories"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Creating output directories" >> workflow-logs/execution.log
        
        directories=("docs/diagrams" "docs/plantuml" "docs/images" "docs/logs")
        
        for dir in "${directories[@]}"; do
          if mkdir -p "$dir"; then
            echo "✓ Created directory: $dir"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Created directory: $dir" >> workflow-logs/execution.log
          else
            echo "::error::Failed to create directory: $dir"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - ERROR: Failed to create directory: $dir" >> workflow-logs/execution.log
            exit 1
          fi
        done
        
        # Set proper permissions
        chmod -R 755 docs/ || {
          echo "::warning::Could not set directory permissions"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - WARNING: Could not set directory permissions" >> workflow-logs/execution.log
        }
        
        echo "::endgroup::"
        
    - name: Generate diagram definitions with comprehensive error handling
      run: |
        echo "::group::Generating Diagram Definitions"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Starting diagram generation" >> workflow-logs/execution.log
        
        # Check if source files exist
        if [ ! -f "src/diagrams/example_system.py" ]; then
          echo "::error::Source file src/diagrams/example_system.py not found"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - ERROR: Source file not found" >> workflow-logs/execution.log
          exit 1
        fi
        
        # Generate diagrams with detailed error capture
        echo "Generating diagrams..."
        if uv run python src/diagrams/example_system.py 2>&1 | tee diagram-generation.log; then
          echo "✓ Diagram generation completed successfully"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Diagram generation completed successfully" >> workflow-logs/execution.log
          
          # Copy generation log to docs for debugging
          cp diagram-generation.log docs/logs/ || echo "::warning::Could not copy generation log"
          
        else
          echo "::error::Diagram generation failed"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - ERROR: Diagram generation failed" >> workflow-logs/execution.log
          
          # Copy error log for debugging
          cp diagram-generation.log docs/logs/ || echo "::warning::Could not copy error log"
          
          # Create fallback content
          echo "Creating fallback diagram content..."
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Creating fallback content" >> workflow-logs/execution.log
          
          cat > docs/ecommerce_architecture.json << 'EOF'
        {
          "workspace": {
            "name": "E-Commerce System Architecture (Fallback)",
            "description": "Fallback content due to generation failure",
            "version": "1.0.0",
            "author": "GitHub Actions",
            "lastUpdated": "$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')"
          },
          "metadata": {
            "diagrams": [],
            "generatedAt": "$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')",
            "status": "fallback"
          }
        }
        EOF
          
          cat > docs/ecommerce_architecture.puml << 'EOF'
        @startuml
        !title E-Commerce System Architecture (Fallback)
        
        note as N1
          Diagram generation failed.
          This is fallback content.
          Check workflow logs for details.
        end note
        
        @enduml
        EOF
          
          echo "::warning::Using fallback content due to generation failure"
        fi
        
        echo "::endgroup::"
        
    - name: Cache PlantUML and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          plantuml.jar
          .cache/
          docs/images/
        key: ${{ runner.os }}-plantuml-${{ env.PLANTUML_VERSION }}-${{ hashFiles('src/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-plantuml-${{ env.PLANTUML_VERSION }}-
          ${{ runner.os }}-plantuml-
        
    - name: Set up PlantUML with error handling
      run: |
        echo "::group::Setting up PlantUML"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Setting up PlantUML" >> workflow-logs/execution.log
        
        # Check if PlantUML is already cached
        if [ -f "plantuml.jar" ] && [ -s "plantuml.jar" ]; then
          echo "✓ PlantUML found in cache"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - PlantUML found in cache" >> workflow-logs/execution.log
          ls -lh plantuml.jar
        else
          echo "PlantUML not in cache, downloading..."
          
          # Update package list with retry
          echo "Updating package list..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if sudo apt-get update; then
              echo "✓ Package list updated successfully"
              break
            else
              echo "::warning::Package update failed on attempt $attempt"
              if [ $attempt -eq $max_attempts ]; then
                echo "::error::Failed to update package list after $max_attempts attempts"
                exit 1
              fi
              sleep 5
              attempt=$((attempt + 1))
            fi
          done
          
          # Install Java Runtime Environment
          echo "Installing Java Runtime Environment..."
          if sudo apt-get install -y default-jre; then
            echo "✓ Java installed successfully"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Java installed successfully" >> workflow-logs/execution.log
            java -version
          else
            echo "::error::Failed to install Java"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - ERROR: Failed to install Java" >> workflow-logs/execution.log
            exit 1
          fi
          
          # Download PlantUML with retry logic
          echo "Downloading PlantUML..."
          plantuml_url="https://github.com/plantuml/plantuml/releases/download/$PLANTUML_VERSION/plantuml-${PLANTUML_VERSION#v}.jar"
          
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if wget -O plantuml.jar "$plantuml_url"; then
              echo "✓ PlantUML downloaded successfully"
              echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - PlantUML downloaded successfully" >> workflow-logs/execution.log
              
              # Verify download
              if [ -f "plantuml.jar" ] && [ -s "plantuml.jar" ]; then
                echo "✓ PlantUML file verified"
                ls -lh plantuml.jar
                break
              else
                echo "::error::PlantUML file is empty or corrupted"
                rm -f plantuml.jar
                exit 1
              fi
            else
              echo "::warning::PlantUML download failed on attempt $attempt"
              if [ $attempt -eq $max_attempts ]; then
                echo "::error::Failed to download PlantUML after $max_attempts attempts"
                exit 1
              fi
              sleep 5
              attempt=$((attempt + 1))
            fi
          done
        fi
        
        echo "::endgroup::"
        
    - name: Render PlantUML diagrams with comprehensive error handling
      run: |
        echo "::group::Rendering PlantUML Diagrams"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Starting PlantUML rendering" >> workflow-logs/execution.log
        
        rendered_count=0
        failed_count=0
        
        # Function to render a single file
        render_file() {
          local puml_file="$1"
          local filename=$(basename "$puml_file" .puml)
          
          echo "Rendering $puml_file..."
          
          # Render to PNG
          if java -jar plantuml.jar -tpng -o ../images "$puml_file" 2>&1 | tee "render-${filename}-png.log"; then
            if [ -f "docs/images/${filename}.png" ]; then
              echo "✓ PNG rendered successfully: ${filename}.png"
              echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - PNG rendered: ${filename}.png" >> workflow-logs/execution.log
            else
              echo "::warning::PNG file not found after rendering: ${filename}.png"
              echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - WARNING: PNG not found: ${filename}.png" >> workflow-logs/execution.log
              return 1
            fi
          else
            echo "::error::PNG rendering failed for $puml_file"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - ERROR: PNG rendering failed: $puml_file" >> workflow-logs/execution.log
            cp "render-${filename}-png.log" docs/logs/ 2>/dev/null || true
            return 1
          fi
          
          # Render to SVG
          if java -jar plantuml.jar -tsvg -o ../images "$puml_file" 2>&1 | tee "render-${filename}-svg.log"; then
            if [ -f "docs/images/${filename}.svg" ]; then
              echo "✓ SVG rendered successfully: ${filename}.svg"
              echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - SVG rendered: ${filename}.svg" >> workflow-logs/execution.log
            else
              echo "::warning::SVG file not found after rendering: ${filename}.svg"
              echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - WARNING: SVG not found: ${filename}.svg" >> workflow-logs/execution.log
            fi
          else
            echo "::warning::SVG rendering failed for $puml_file (PNG succeeded)"
            echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - WARNING: SVG rendering failed: $puml_file" >> workflow-logs/execution.log
            cp "render-${filename}-svg.log" docs/logs/ 2>/dev/null || true
          fi
          
          return 0
        }
        
        # Check for PlantUML files in multiple locations
        puml_locations=("docs" "docs/plantuml" ".")
        found_files=false
        
        for location in "${puml_locations[@]}"; do
          if [ -d "$location" ]; then
            for puml_file in "$location"/*.puml; do
              if [ -f "$puml_file" ]; then
                found_files=true
                if render_file "$puml_file"; then
                  rendered_count=$((rendered_count + 1))
                else
                  failed_count=$((failed_count + 1))
                fi
              fi
            done
          fi
        done
        
        if [ "$found_files" = false ]; then
          echo "::warning::No PlantUML files found to render"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - WARNING: No PlantUML files found" >> workflow-logs/execution.log
          
          # Create a placeholder image
          echo "Creating placeholder content..."
          cat > docs/images/placeholder.svg << 'EOF'
        <svg xmlns="http://www.w3.org/2000/svg" width="400" height="200" viewBox="0 0 400 200">
          <rect width="400" height="200" fill="#f0f0f0" stroke="#ccc"/>
          <text x="200" y="100" text-anchor="middle" font-family="Arial" font-size="16" fill="#666">
            No diagrams available
          </text>
          <text x="200" y="120" text-anchor="middle" font-family="Arial" font-size="12" fill="#999">
            Check workflow logs for details
          </text>
        </svg>
        EOF
        else
          echo "Rendering summary:"
          echo "  ✓ Successfully rendered: $rendered_count files"
          echo "  ✗ Failed to render: $failed_count files"
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Rendering complete: $rendered_count success, $failed_count failed" >> workflow-logs/execution.log
          
          if [ $failed_count -gt 0 ]; then
            echo "::warning::Some files failed to render, but continuing with available content"
          fi
        fi
        
        echo "::endgroup::"
        
    - name: Inventory generated files with detailed logging
      run: |
        echo "::group::Generated Files Inventory"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Creating file inventory" >> workflow-logs/execution.log
        
        echo "Generated files inventory:"
        
        # Create detailed inventory
        {
          echo "=== GENERATED FILES INVENTORY ==="
          echo "Generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo ""
          
          echo "JSON Files:"
          find docs -type f -name "*.json" | sort | while read -r file; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
              echo "  ✓ $file (${size} bytes)"
            fi
          done
          
          echo ""
          echo "PlantUML Files:"
          find docs -type f -name "*.puml" | sort | while read -r file; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
              echo "  ✓ $file (${size} bytes)"
            fi
          done
          
          echo ""
          echo "Image Files:"
          find docs -type f \( -name "*.png" -o -name "*.svg" \) | sort | while read -r file; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
              echo "  ✓ $file (${size} bytes)"
            fi
          done
          
          echo ""
          echo "Log Files:"
          find docs -type f -name "*.log" | sort | while read -r file; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
              echo "  ✓ $file (${size} bytes)"
            fi
          done
          
          echo ""
          echo "Total files: $(find docs -type f | wc -l)"
          echo "Total size: $(du -sh docs 2>/dev/null | cut -f1 || echo "unknown")"
          
        } | tee docs/file-inventory.txt
        
        # Copy workflow logs to docs
        cp workflow-logs/execution.log docs/logs/ 2>/dev/null || echo "::warning::Could not copy execution log"
        
        echo "::endgroup::"
        
    - name: Generate static HTML pages with error handling
      run: |
        echo "::group::Generating Static HTML Pages"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Generating static site" >> workflow-logs/execution.log
        
        # Generate enhanced index.html with error handling
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Architecture Diagrams</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    margin: 0; 
                    padding: 20px; 
                    background-color: #f5f5f5; 
                }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; border-bottom: 3px solid #007acc; padding-bottom: 10px; }
                .status { padding: 10px; border-radius: 5px; margin: 20px 0; }
                .status.success { background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
                .status.warning { background-color: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }
                .status.error { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
                .diagram-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin: 20px 0; }
                .diagram-item { border: 1px solid #ddd; border-radius: 8px; padding: 20px; background: #fafafa; }
                .diagram-item h3 { margin-top: 0; color: #007acc; }
                .diagram-item img { max-width: 100%; height: auto; border: 1px solid #eee; border-radius: 4px; }
                .metadata { font-size: 0.9em; color: #666; margin-top: 10px; }
                .logs-section { margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 5px; }
                .logs-section h2 { color: #495057; }
                .log-link { display: inline-block; margin: 5px 10px 5px 0; padding: 5px 10px; background: #007acc; color: white; text-decoration: none; border-radius: 3px; font-size: 0.9em; }
                .log-link:hover { background: #005a9e; }
                footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; font-size: 0.9em; color: #666; text-align: center; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Architecture Diagrams</h1>
        EOF
        
        # Add workflow status
        echo "                <div class=\"status success\">" >> docs/index.html
        echo "                    <strong>✓ Workflow Status:</strong> Completed successfully" >> docs/index.html
        echo "                    <br><strong>Generated:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> docs/index.html
        echo "                    <br><strong>Run ID:</strong> ${{ github.run_id }}" >> docs/index.html
        echo "                    <br><strong>Commit:</strong> ${{ github.sha }}" >> docs/index.html
        echo "                </div>" >> docs/index.html
        
        # Add diagrams section
        echo "                <div class=\"diagram-grid\">" >> docs/index.html
        
        diagram_count=0
        if [ -d "docs/images" ] && [ "$(ls -A docs/images)" ]; then
          for img_file in docs/images/*.png docs/images/*.svg; do
            if [ -f "$img_file" ]; then
              filename=$(basename "$img_file")
              name_without_ext="${filename%.*}"
              extension="${filename##*.}"
              
              echo "                    <div class=\"diagram-item\">" >> docs/index.html
              echo "                        <h3>$name_without_ext</h3>" >> docs/index.html
              echo "                        <img src=\"images/$filename\" alt=\"$name_without_ext\" loading=\"lazy\">" >> docs/index.html
              echo "                        <div class=\"metadata\">" >> docs/index.html
              echo "                            <strong>Format:</strong> ${extension^^}<br>" >> docs/index.html
              
              # Add file size if available
              if [ -f "$img_file" ]; then
                size=$(stat -c%s "$img_file" 2>/dev/null || echo "0")
                if [ "$size" -gt 1024 ]; then
                  size_kb=$((size / 1024))
                  echo "                            <strong>Size:</strong> ${size_kb} KB<br>" >> docs/index.html
                else
                  echo "                            <strong>Size:</strong> ${size} bytes<br>" >> docs/index.html
                fi
              fi
              
              echo "                            <strong>Generated:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> docs/index.html
              echo "                        </div>" >> docs/index.html
              echo "                    </div>" >> docs/index.html
              
              diagram_count=$((diagram_count + 1))
            fi
          done
        fi
        
        if [ $diagram_count -eq 0 ]; then
          echo "                    <div class=\"diagram-item\">" >> docs/index.html
          echo "                        <h3>No Diagrams Available</h3>" >> docs/index.html
          echo "                        <p>No diagrams were generated in this workflow run. Check the logs below for details.</p>" >> docs/index.html
          echo "                    </div>" >> docs/index.html
        fi
        
        echo "                </div>" >> docs/index.html
        
        # Add logs section
        echo "                <div class=\"logs-section\">" >> docs/index.html
        echo "                    <h2>Workflow Logs & Debugging</h2>" >> docs/index.html
        echo "                    <p>Access detailed logs for troubleshooting and debugging:</p>" >> docs/index.html
        
        # Add links to available log files
        if [ -d "docs/logs" ] && [ "$(ls -A docs/logs)" ]; then
          for log_file in docs/logs/*.log; do
            if [ -f "$log_file" ]; then
              log_name=$(basename "$log_file")
              echo "                    <a href=\"logs/$log_name\" class=\"log-link\">$log_name</a>" >> docs/index.html
            fi
          done
        fi
        
        # Add link to file inventory
        if [ -f "docs/file-inventory.txt" ]; then
          echo "                    <a href=\"file-inventory.txt\" class=\"log-link\">File Inventory</a>" >> docs/index.html
        fi
        
        echo "                </div>" >> docs/index.html
        
        # Add footer
        cat >> docs/index.html << 'EOF'
                <footer>
                    <p>Generated by GitHub Actions • Architecture Documentation System</p>
                    <p>For issues or questions, check the workflow logs or contact the development team.</p>
                </footer>
            </div>
        </body>
        </html>
        EOF
        
        echo "✓ Static HTML pages generated successfully"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Static site generated successfully" >> workflow-logs/execution.log
        
        # Validate HTML structure
        if [ -f "docs/index.html" ] && [ -s "docs/index.html" ]; then
          echo "✓ HTML file validated (non-empty)"
        else
          echo "::error::Generated HTML file is empty or missing"
          exit 1
        fi
        
        echo "::endgroup::"
        
    - name: Prepare and validate artifact for upload
      run: |
        echo "::group::Preparing Upload Artifact"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Preparing artifact for upload" >> workflow-logs/execution.log
        
        # Final validation of docs directory
        if [ ! -d "docs" ]; then
          echo "::error::docs directory does not exist"
          exit 1
        fi
        
        # Ensure index.html exists
        if [ ! -f "docs/index.html" ]; then
          echo "::error::index.html not found in docs directory"
          exit 1
        fi
        
        # Check directory structure
        echo "Final directory structure:"
        find docs -type f | head -20 | while read -r file; do
          echo "  $file"
        done
        
        # Create final status file
        cat > docs/workflow-status.json << EOF
        {
          "status": "completed",
          "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')",
          "workflow_run_id": "${{ github.run_id }}",
          "commit_sha": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "actor": "${{ github.actor }}",
          "total_files": $(find docs -type f | wc -l),
          "has_diagrams": $([ -d "docs/images" ] && [ "$(ls -A docs/images 2>/dev/null)" ] && echo "true" || echo "false")
        }
        EOF
        
        echo "✓ Artifact preparation completed"
        echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC') - Artifact preparation completed" >> workflow-logs/execution.log
        echo "::endgroup::"
    
    - name: Upload Pages artifact with error handling
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
        retention-days: 30
      continue-on-error: false
      
    - name: Create workflow summary
      if: always()
      run: |
        echo "## 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Workflow Run ID | ${{ github.run_id }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit SHA | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Timestamp | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "docs/file-inventory.txt" ]; then
          echo "### 📁 Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 docs/file-inventory.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "workflow-logs/execution.log" ]; then
          echo "### 📋 Execution Log (Last 10 lines)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -10 workflow-logs/execution.log >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: render-diagrams
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to GitHub Pages with comprehensive error handling
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: false
      
    - name: Verify deployment success
      if: success()
      run: |
        echo "::notice::GitHub Pages deployment successful"
        echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
        
        # Optional: Test the deployed site
        if command -v curl >/dev/null 2>&1; then
          echo "Testing deployed site..."
          if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
            echo "✓ Site is accessible"
          else
            echo "::warning::Site may not be immediately accessible (this is normal)"
          fi
        fi
        
    - name: Handle deployment failure
      if: failure()
      run: |
        echo "::error::GitHub Pages deployment failed"
        echo "This could be due to:"
        echo "  - Repository settings (Pages not enabled)"
        echo "  - Permission issues"
        echo "  - Artifact upload problems"
        echo "  - GitHub Pages service issues"
        echo ""
        echo "Please check:"
        echo "  1. Repository Settings > Pages is configured"
        echo "  2. Workflow permissions include 'pages: write'"
        echo "  3. Previous workflow steps completed successfully"
        echo ""
        echo "For more details, check the workflow logs and GitHub Pages settings."
        exit 1
        
    - name: Create deployment summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.deployment.outcome }}" = "success" ]; then
          echo "✅ **Deployment Status:** Successful" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment Status:** Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY